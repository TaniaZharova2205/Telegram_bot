from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form, FoodLogState
from database import save_to_database, get_user_data, update_logged_water, update_log_calories, get_workout, update_burned_calories, update_water_goal
from calculation import calculate_calorie_goal, calculate_water_goal, get_food_info, calculate_workout_effect
from decimal import Decimal
import matplotlib.pyplot as plt
import io
from aiogram.types import BufferedInputFile

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n"
        "/view_profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã\n"
        "/log_water - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã\n"
        "/log_food - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–ª–æ—Ä–∏–π\n"
        "/log_workout - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/check_progress - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º\n"
        "/progress_chart - –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
    )

# FSM: –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(Command("set_profile"))
async def start_set_profile(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(Form.weight)

@router.message(Form.weight)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(Form.height)

@router.message(Form.height)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)

@router.message(Form.age)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Form.activity_level)

@router.message(Form.activity_level)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(activity_level=message.text)
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Form.city)

@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.reply(
        "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –≤—Ä—É—á–Ω—É—é? –ï—Å–ª–∏ –¥–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞. –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'."
    )
    await state.set_state(Form.calorie_goal)

@router.message(Form.calorie_goal)
async def process_calorie_goal(message: Message, state: FSMContext):
    user_input = message.text.lower()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    try:
        weight = int(data["weight"])
        height = int(data["height"])
        age = int(data["age"])
        activity_level = int(data["activity_level"])
        city = data["city"]
    except KeyError as e:
        await message.reply("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # –†–∞—Å—á—ë—Ç —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π
    if user_input == "–Ω–µ—Ç":
        calorie_goal = calculate_calorie_goal(weight, height, age, activity_level)
    else:
        try:
            calorie_goal = float(user_input)
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π –∏–ª–∏ '–Ω–µ—Ç'.")
            return 

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(calorie_goal=calorie_goal)
    water_goal = calculate_water_goal(weight, activity_level, city)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    user_id = message.from_user.id
    data_to_save = {
        "user_id": user_id,
        "weight": weight,
        "height": height,
        "age": age,
        "activity_level": activity_level,
        "city": city,
        "calorie_goal": calorie_goal,
        "water_goal": water_goal
    }

    try:
        await save_to_database(data_to_save)
        await message.reply(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n"
            f"–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª.\n"
        )
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    await state.clear()

@router.message(Command("view_profile"))
async def view_profile(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user_data = await get_user_data(user_id)

        if not user_data:
            await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        await message.reply(
                f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"‚öñÔ∏è–í–µ—Å: {user_data['weight']} –∫–≥.\n"
                f"üìà–†–æ—Å—Ç: {user_data['height']} —Å–º.\n"
                f"üßì–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç.\n"
                f"üåÜ–ì–æ—Ä–æ–¥: {user_data['city']}.\n"
                f"ü•ê–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {user_data['calorie_goal']} –∫–∫–∞–ª.\n"
                f"üíß–¶–µ–ª—å –≤–æ–¥—ã: {user_data['water_goal']} –º–ª.\n"
            )
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(Command("log_water"))
async def log_water(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        amount = int(message.text.split(" ")[1])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        user_data = await get_user_data(user_id)

        if not user_data:
            await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        
        water_goal =  user_data.get("water_goal", 0)
        current_logged = user_data.get("logged_water", 0)
        new_logged = current_logged + amount
        remaining_water = max(0, water_goal - new_logged)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        await update_logged_water(user_id, new_logged)

        await message.reply(
            f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {new_logged} –º–ª. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã."
        )
    except (IndexError, ValueError):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–ª>")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_name = message.text.split(" ", 1)[1]  # –ë–µ—Ä—ë–º –≤—Å—ë –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        amount = get_food_info(product_name)

        if not amount:
            await message.reply("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(product=amount)

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ –æ–Ω —Å—ä–µ–ª
        await message.reply(
            f"{amount['name']} —Å–æ–¥–µ—Ä–∂–∏—Ç {amount['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
        await state.set_state(FoodLogState.waiting_for_food_amount)

    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@router.message(FoodLogState.waiting_for_food_amount)
async def process_food_amount(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        product = user_data.get("product")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        grams = int(message.text)
        if grams <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
        calories = (Decimal(product['calories']) / Decimal(100)) * Decimal(grams)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_profile = await get_user_data(user_id)

        if not user_profile:
            await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–π
        calorie_goal = Decimal(user_profile.get("calorie_goal", 0))
        current_logged = Decimal(user_profile.get("logged_calories", 0))
        new_logged = current_logged + calories
        remaining_calories = max(Decimal(0), calorie_goal - new_logged)

        await update_log_calories(user_id, float(new_logged))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ float, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(
            f"–í—ã —Å—ä–µ–ª–∏ {grams} –≥ {product['name']}, —ç—Ç–æ {calories:.2f} –∫–∫–∞–ª.\n"
            f"–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {new_logged:.2f} –∫–∫–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã: {remaining_calories:.2f} –∫–∫–∞–ª."
        )

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≥—Ä–∞–º–º—ã). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    await state.clear()

@router.message(Command("log_workout"))
async def log_workout(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(" ", 2)
        if len(command_parts) < 3:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>")
            return

        workout_type = command_parts[1].lower()  # –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        try:
            workout_time = int(command_parts[2])  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞ (–º–∏–Ω—É—Ç—ã).")
            return

        if workout_time <= 0:
            await message.reply("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user_id = message.from_user.id
        user_profile = await get_user_data(user_id)
        workout = await get_workout(workout_type)
        if not user_profile:
            await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        if not workout:
            await message.reply("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
            return
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π)
        weight = int(user_profile["weight"])

        # –†–∞—Å—á—ë—Ç —Å–æ–∂–∂—ë–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π –∏ –≤–æ–¥—ã
        calories_burned, additional_water = calculate_workout_effect(workout_time, weight, workout["calorie_rates"], workout["water_rate_per_30_min"])

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_burned_calories = Decimal(user_profile.get("burned_calories", 0))
        current_logged_water = Decimal(user_profile.get("water_goal", 0))

        new_burned_calories = current_burned_calories + calories_burned
        new_logged_water = current_logged_water + additional_water

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_burned_calories(user_id, float(new_burned_calories))  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–∂–∂—ë–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        await update_water_goal(user_id, float(new_logged_water))    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–¥—É

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.reply(
            f"üí™ {workout_type.capitalize()} {workout_time} –º–∏–Ω—É—Ç ‚Äî {calories_burned:.2f} –∫–∫–∞–ª.\n"
            f"üíß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π—Ç–µ {additional_water} –º–ª –≤–æ–¥—ã."
        )

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@router.message(Command("check_progress"))
async def check_progress(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user_data = await get_user_data(user_id)

        if not user_data:
            await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        current_logged = user_data.get("logged_water", 0)
        remaining_water = max(0, user_data["water_goal"] - current_logged)
        remaining_callories = max(0, user_data["logged_calories"] - user_data["burned_calories"])
        await message.reply(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
                f"–í–æ–¥–∞:\n"
                f"- –í—ã–ø–∏—Ç–æ: {user_data['logged_water']} –º–ª –∏–∑ {user_data['water_goal']} –º–ª.\n"
                f"- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n"
                f"–ö–∞–ª–æ—Ä–∏–∏:\n"
                f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_data['logged_calories']} –∫–∫–∞–ª –∏–∑ {user_data['calorie_goal']} –∫–∫–∞–ª.\n"
                f"- –°–æ–∂–∂–µ–Ω–æ: {user_data['burned_calories']} –∫–∫–∞–ª.\n"
                f"- –ë–∞–ª–∞–Ω—Å: {remaining_callories} –∫–∫–∞–ª.\n"
            )
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def generate_progress_chart(user_id):
    user_data = await get_user_data(user_id)
    if not user_data:
        return None

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    water_goal = user_data["water_goal"]
    logged_water = user_data["logged_water"]
    calorie_goal = user_data["calorie_goal"]
    logged_calories = user_data["logged_calories"]
    burned_calories = user_data["burned_calories"]

    # –ì—Ä–∞—Ñ–∏–∫
    fig, axs = plt.subplots(2, 1, figsize=(6, 8))
    fig.suptitle('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', fontsize=16)

    # –ì—Ä–∞—Ñ–∏–∫ –≤–æ–¥—ã
    axs[0].bar(['–í—ã–ø–∏—Ç–æ', '–¶–µ–ª—å'], [logged_water, water_goal], color=['blue', 'lightblue'])
    axs[0].set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ')
    axs[0].set_ylabel('–º–ª')
    axs[0].set_ylim(0, max(water_goal, logged_water) + 500)

    # –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π
    axs[1].bar(['–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ', '–°–æ–∂–∂–µ–Ω–æ', '–¶–µ–ª—å'], [logged_calories, burned_calories, calorie_goal],
               color=['orange', 'red', 'lightgreen'])
    axs[1].set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º')
    axs[1].set_ylabel('–∫–∫–∞–ª')
    axs[1].set_ylim(0, max(calorie_goal, logged_calories, burned_calories) + 500)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    return BufferedInputFile(buf.read(), filename='progress.png')

@router.message(Command("progress_chart"))
async def send_progress_chart(message: Message):
    try:
        user_id = message.from_user.id
        chart = await generate_progress_chart(user_id)

        if chart:
            await message.answer_photo(chart, caption="üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º.")
        else:
            await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)
